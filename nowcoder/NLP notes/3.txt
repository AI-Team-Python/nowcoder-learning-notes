面试的主要部分如下

1：CNN、RNN基本概念和网络结构。当时RNN不太熟，面的都是CNN的，RNN问了一句我说不知道，就没问了。
2：deep learning网络权重初始化、各种梯度下降算法与使用情况，神经网络中各种loss的区别。
cross entropy的物理含义。batch-gradient descent与mini-gradient descent和SGD
3：word2vec结构，skip-gram结构与负采样，w2v如何调参。
4：TF-IDF算法结构。
5：GBDT的结构，算法思路
6：imbalance问题的处理
7：情感分析的思路（词典方法、dl方法-cnn，lstm，h-lstm）
8：很多java，python基础知识，java垃圾回收、python生成器、迭代器。基本上10分钟的面试基础知识，我十分钟说了20多次不知道，前面还聊的不错，估计跪在这里了。
9：分布式编程map reduce，说了下我自己写的SVM MR，但是面试官说我的思路有问题，和我交流了一下。
10：nlp其他方面的任务（主题模型、文本相似度、NER、分词）。问我还做了什么nlp的任务，



终于到周末啦！小易走在市区的街道上准备找朋友聚会，突然服务器发来警报,小易需要立即回公司修复这个紧急bug。假设市区是一个无限大的区域，每条街道假设坐标是(X，Y)，小易当前在(0，0)街道，办公室在(gx,gy)街道上。小易周围有多个出租车打车点，小易赶去办公室有两种选择，一种就是走路去公司，另外一种就是走到一个出租车打车点，然后从打车点的位置坐出租车去公司。每次移动到相邻的街道(横向或者纵向)走路将会花费walkTime时间，打车将花费taxiTime时间。小易需要尽快赶到公司去，现在小易想知道他最快需要花费多少时间去公司。
输入描述:
输入数据包括五行:

第一行为周围出租车打车点的个数n(1 ≤ n ≤ 50)

第二行为每个出租车打车点的横坐标tX[i] (-10000 ≤ tX[i] ≤ 10000)

第三行为每个出租车打车点的纵坐标tY[i] (-10000 ≤ tY[i] ≤ 10000)

第四行为办公室坐标gx,gy(-10000 ≤ gx,gy ≤ 10000),以空格分隔

第五行为走路时间walkTime(1 ≤ walkTime ≤ 1000)和taxiTime(1 ≤ taxiTime ≤ 1000),以空格分隔

输出描述:
输出一个整数表示，小易最快能赶到办公室的时间


输入例子:
2
-2 -2
0 -2
-4 -2
15 3

输出例子:
42

C++版本：

#include<iostream>
#include<cmath>

using namespace std;

int n,tx[55],ty[55],gx,gy,walkTime,taxiTime;
int main(){
    cin>>n;
    for(int i=0;i<n;i++)  cin>>tx[i];
    for(int i=0;i<n;i++)  cin>>ty[i];
    cin>>gx>>gy;
    cin>>walkTime>>taxiTime;
    int ans=(abs(gx-0)+abs(gy-0))*walkTime;
    for(int i=0;i<n;i++){
        int res=(abs(tx[i]-0)+abs(ty[i]-0))*walkTime;
        res+=(abs(tx[i]-gx)+abs(ty[i]-gy))*taxiTime;
        ans=min(ans,res);
    }
    cout<<ans<<endl;
    //cin.ignore(numeric_limits<streamsize>::max(), '\n');
    return 0;
}